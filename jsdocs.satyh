@require: hdecoset
@require: vdecoset
@require: pervasives
@require: gr
@require: list
@require: math
@require: code
@require: color
@require: option
@require: annot
@require: footnote-scheme

type config = (|
    paper-size    : page;
    show-pages    : bool;
    text-width    : length;
    text-height   : length;
    text-origin   : point;
    header-origin : point;
    footer-origin : point;
    header-width  : length;
    footer-width  : length;
    show-toc      : bool;
    no-title-pageno : bool;
    % show-title    : bool;
|)

% based on StdJaReport
module JSDocs : sig

    val default-config : config

    val document : 'a -> config ?-> (length -> block-text) ?-> block-text -> document
        constraint 'a :: (|
            title : inline-text;
            author : inline-text;
            show-toc : bool;
            % show-title : bool;
        |)

    val font-latin-roman  : string * float * float
    val font-latin-italic : string * float * float
    val font-latin-bold   : string * float * float
    val font-latin-sans   : string * float * float
    val font-latin-mono   : string * float * float
    val font-cjk-mincho   : string * float * float
    val font-cjk-gothic   : string * float * float
    val set-latin-font : (string * float * float) -> context -> context
    val set-cjk-font   : (string * float * float) -> context -> context
    direct \dfn : [inline-text] inline-cmd
    direct \ref : [string] inline-cmd
    direct \ref-eq : [string] inline-cmd
    direct \ref-eqq : [string; string] inline-cmd
    direct \ref-chap : [string] inline-cmd
    direct \ref-sec : [string] inline-cmd
    direct \ref-tbl : [string] inline-cmd
    direct \ref-fig : [string] inline-cmd
    direct \ref-page : [string] inline-cmd
    direct \figure : [string?; inline-text; block-text] inline-cmd
    direct +figure : [string?; inline-text; block-text] block-cmd
    direct +p : [inline-text] block-cmd
    direct +chapter : [string?; string?; inline-text; block-text] block-cmd
    direct +section : [string?; string?; inline-text; block-text] block-cmd
    direct +section-no-number : [string?; inline-text; block-text] block-cmd
    direct +subsection : [string?; string?; inline-text; block-text] block-cmd
    direct +definition : [inline-text?; string?; inline-text] block-cmd
    direct +theorem : [inline-text?; string?; inline-text] block-cmd
    direct +example : [inline-text?; string?; inline-text] block-cmd
    direct +lemma : [inline-text?; string?; inline-text] block-cmd
    direct +corollary : [inline-text?; string?; inline-text] block-cmd
    direct +proof : [inline-text?; inline-text] block-cmd
    direct \emph : [inline-text] inline-cmd
    direct \dfn : [inline-text] inline-cmd
    direct \footnote : [inline-text] inline-cmd

end = struct

    type toc-element =
        | TOCElementChapter    of string * inline-text
        | TOCElementSection    of string * inline-text
        | TOCElementSectionNoNumber  of string * inline-text
        | TOCElementSubsection of string * inline-text


    let generate-fresh-label =
        let-mutable count <- 0 in
        (fun () -> (
            let () = count <- !count + 1 in
            `generated:` ^ (arabic (!count))
        ))


    let no-pads = (0pt, 0pt, 0pt, 0pt)

    let-inline ctx \ref key =
        let opt = get-cross-reference (key ^ `:num`) in
        let it =
            match opt with
            | None    -> {?}
            | Some(s) -> embed-string s
        in
        inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it)


    let-inline ctx \ref-page key =
        let opt = get-cross-reference (key ^ `:page`) in
        let it =
            match opt with
            | None    -> {?}
            | Some(s) -> embed-string s
        in
        inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it)

    let-inline ctx \ref-eq r =
        let tag = `eq:` ^ r in
        read-inline ctx {式(\ref(tag);)}

    let-inline ctx \ref-eqq r1 r2 =
        let tag1 = `eq:` ^ r1 in
        let tag2 = `eq:` ^ r2 in
        read-inline ctx {式(\ref(tag1);)-(\ref(tag2);)}

    let-inline ctx \ref-chap r =
        let tag = `chap:` ^ r in
        read-inline ctx {\ref(tag);章}

    let-inline ctx \ref-sec r =
        let tag = `sec:` ^ r in
        read-inline ctx {\ref(tag);節}

    let-inline ctx \ref-tbl r =
        let tag = `tbl:` ^ r in
        read-inline ctx {表\ref(tag);}

    let-inline ctx \ref-fig r =
        let tag = `fig:` ^ r in
        read-inline ctx {図\ref(tag);}

    let font-size-normal  = 12pt
    let font-size-title   = 18pt
    let font-size-author  = 16pt
    let font-size-chapter = 22pt
    let font-size-section = 18pt
    let font-size-subsection = 16pt

    let section-top-margin = 20pt
    let section-bottom-margin = 12pt
    let title-line-margin = 4pt
    let title-line-thickness = 1pt

    let chapter-top-margin = 30pt
    let chapter-bottom-margin = 18pt

    let font-ratio-latin = 1.
    let font-ratio-cjk = 0.88

    let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
    let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
    let font-latin-bold   = (`Junicode-b` , font-ratio-latin, 0.)
    let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
    let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
    let font-cjk-mincho   = (`ipaexm`    , font-ratio-cjk  , 0.)
    let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)


    let set-latin-font font ctx =
        ctx |> set-font Latin font


    let set-cjk-font font ctx =
        ctx |> set-font HanIdeographic font
            |> set-font Kana           font

    let-inline ctx \dfn word =
        let ctx-dfn =
            ctx |> set-latin-font font-latin-sans
                |> set-cjk-font font-cjk-gothic
                |> set-text-color (RGB(0.8, 0., 0.))
        in
        read-inline ctx-dfn word


    let get-standard-context wid =
        get-initial-context wid (command \math)
            |> set-code-text-command (command \code)
            |> set-dominant-wide-script Kana
            |> set-language Kana Japanese
            |> set-language HanIdeographic Japanese
            |> set-dominant-narrow-script Latin
            |> set-language Latin English
            |> set-font Kana           font-cjk-mincho
            |> set-font HanIdeographic font-cjk-mincho
            |> set-font Latin          font-latin-roman
            |> set-math-font `lmodern`
            |> set-hyphen-penalty 100


    let-mutable ref-float-boxes <- []


    let height-of-float-boxes pageno =
%    let () = display-message `get height` in
        (!ref-float-boxes) |> List.fold-left (fun h (pn, bb) -> (
            if pn < pageno then h +' (get-natural-length bb) else h
        )) 0pt


    let-mutable ref-figure <- 0

    let-block ctx +figure ?:labelopt caption inner =
        let () = ref-figure <- !ref-figure + 1 in
        let s-num = arabic (!ref-figure) in
        let () =
            match labelopt with
            | Some(label) -> register-cross-reference (label ^ `:num`) s-num
            | None        -> ()
        in
        let it-num = embed-string s-num in
        let ds =
            match labelopt with
            | Some(label) -> Annot.register-location-frame label
            | None        ->
                  let d (_, _) _ _ _ = [] in (d, d, d, d)
        in
        block-frame-breakable ctx (2pt, 2pt, 2pt, 2pt) ds (fun ctx -> (
            read-block ctx inner
                +++ line-break true true ctx (inline-fil ++ read-inline ctx {図#it-num; #caption;} ++ inline-fil)
        ))

    let-inline ctx \figure ?:labelopt caption inner =
        let () = ref-figure <- !ref-figure + 1 in
        let s-num = arabic (!ref-figure) in
        let () =
            match labelopt with
            | Some(label) -> register-cross-reference (label ^ `:num`) s-num
            | None        -> ()
        in
        let it-num = embed-string s-num in
        let ds =
            match labelopt with
            | Some(label) -> Annot.register-location-frame label
            | None        ->
                  let d (_, _) _ _ _ = [] in (d, d, d, d)
        in
        let bb-inner =
            block-frame-breakable ctx (2pt, 2pt, 2pt, 2pt) ds (fun ctx -> (
                read-block ctx inner
                    +++ line-break true true ctx (inline-fil ++ read-inline ctx {図#it-num; #caption;} ++ inline-fil)
            ))
        in
        hook-page-break (fun pbinfo _ -> (
%        let () = display-message (`register` ^ (arabic pbinfo#page-number)) in
            ref-float-boxes <- (pbinfo#page-number, bb-inner) :: !ref-float-boxes
        ))

    let title-deco =
        let pads = (5pt, 5pt, 10pt, 10pt) in
        let deco (x, y) wid hgt dpt =
            let path1 =
                let cx = 14pt in
                let cy = 8pt in
                let xL = x in
                let xR = x +' wid in
                let yT = y +' hgt in
                let yB = y -' dpt in
                start-path (xL, yT)
                    |> line-to (xR, yT)
                    |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
                    |> line-to (xL, yB)
                    |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
            in
            let path2 =
                let cx = 12pt in
                let cy = 8pt in
                let gapx = 3pt in
                let gapy = 5pt in
                let xL = x +' gapx in
                let xR = x +' wid -' gapx in
                let yT = y +' hgt -' gapy in
                let yB = y -' dpt +' gapy in
                start-path (xL, yT)
                    |> line-to (xR, yT)
                    |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
                    |> line-to (xL, yB)
                    |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
            in
            [
                stroke 3pt Color.black path1;
                stroke 1pt Color.black path2;
            ]
        in
        (deco, deco, deco, deco)


    let-block ctx +make-title it-title it-author =
        let pads = (20pt, 20pt, 10pt, 10pt) in
        block-frame-breakable ctx pads title-deco (fun ctx -> (
            let ctx-title =
                ctx |> set-font-size font-size-title
                    |> set-font Latin font-latin-roman
            in
            let ctx-author =
                ctx |> set-font-size font-size-author
                    |> set-font Latin font-latin-roman
            in
            let ib-title = read-inline ctx-title it-title in
            let ib-line =
                let thk = title-line-thickness in
                let wid = get-text-width ctx in
                let path (x, y) =
                    start-path (x, y +' thk *' 0.5)
                        |> line-to (x +' wid, y +' thk *' 0.5)
                        |> terminate-path
                in
                inline-graphics wid thk 0pt (fun pt -> (
                    [ stroke thk Color.black (path pt); ]
                ))
            in
            let ib-author = read-inline ctx-author it-author in
            let bb-title =
%        if get-text-width ctx <' get-natural-width ib-title then
%          form-paragraph ctx-title (ib-title ++ inline-fil)
%        else
                form-paragraph (ctx-title |> set-paragraph-margin 12pt 0pt)
                    (inline-fil ++ ib-title ++ inline-fil)
            in
            let bb-line =
                form-paragraph (ctx |> set-paragraph-margin title-line-margin title-line-margin)
                    (ib-line ++ inline-fil)
            in
            let bb-author = form-paragraph ctx-author (inline-fil ++ ib-author) in
            bb-title +++ bb-line +++ bb-author
        ))

    let make-chapter-title ctx =
        ctx |> set-font-size font-size-chapter
            |> set-font Latin font-latin-sans
            |> set-cjk-font font-cjk-gothic


    let make-section-title ctx =
        ctx |> set-font-size font-size-section
            |> set-font Latin font-latin-sans
            |> set-cjk-font font-cjk-gothic


    let make-subsection-title ctx =
        ctx |> set-font-size font-size-subsection
            |> set-font Latin font-latin-sans
            |> set-cjk-font font-cjk-gothic


    let-mutable toc-acc-ref <- []
    let-mutable outline-ref <- []


    let get-cross-reference-number label =
        match get-cross-reference (label ^ `:num`) with
        | None    -> `?`
        | Some(s) -> s


    let get-cross-reference-page label =
        match get-cross-reference (label ^ `:page`) with
        | None    -> `?`
        | Some(s) -> s


    let chapter-heading ctx ib-heading =
        line-break true false
            (ctx |> set-paragraph-margin chapter-top-margin chapter-bottom-margin)
                ib-heading

    let section-heading ctx ib-heading =
        line-break true false
            (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                ib-heading

    let section-no-number-heading ctx ib-heading =
        line-break true false
            (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                ib-heading


    let-inline ctx \dummy it =
        let ib = read-inline (ctx |> set-text-color Color.white) it in
        let w = get-natural-width ib in
        ib ++ inline-skip (0pt -' w)

    let-rec repeat-inline n ib =
        if n <= 0 then inline-nil else
            ib ++ (repeat-inline (n - 1) ib)

    let make-dots-line ctx w =
        let ib = read-inline ctx {.} ++ inline-skip 1pt in
        let wdot = get-natural-width ib in
        let n = round (w /' wdot) in
        inline-fil ++ (repeat-inline n ib)

    let default-config =
        (|
            show-pages    = true;
            paper-size    = A4Paper;
            text-width    = 440pt;
            text-height   = 630pt;
            text-origin   = (80pt, 100pt);
            header-origin = (40pt, 30pt);
            footer-origin = (40pt, 780pt);
            header-width  = 520pt;
            footer-width  = 520pt;
            show-toc      = true;
            no-title-pageno = true;
            % show-title    = true;
        |)

    let document record ?:configopt ?:titlefunc inner =
        % -- mandatory designations --
        let title = record#title in
        let author = record#author in

        % -- optional designations --
        let config = Option.from default-config configopt in
        let page = config#paper-size in
        let txtorg = config#text-origin in
        let txtwid = config#text-width in
        let txthgt = config#text-height in
        let hdrorg = config#header-origin in
        let ftrorg = config#footer-origin in
        let hdrwid = config#header-width in
        let ftrwid = config#footer-width in
        let show-pages = config#show-pages in
        let no-title-pageno = config#no-title-pageno in

        let () =
            FootnoteScheme.initialize ()
        in

        let ctx-doc = get-standard-context txtwid in

        % -- title --
        let bb-title = match titlefunc with
            | Some(f) -> read-block ctx-doc (f txthgt)
            | None    -> block-nil
        in

        % -- main --
        let bb-main = read-block ctx-doc inner in

        % -- table of contents --
        let toc-section-indent = 20pt in
        let toc-subsection-indent = 40pt in
        let bb-toc =
            if not record#show-toc then
                block-nil
            else
                let ib-toc-title =
                    read-inline (make-section-title ctx-doc) {目次} ++ inline-fil
                in
                let bb-toc-main =
                    (!toc-acc-ref) |> List.reverse |> List.fold-left (fun bbacc tocelem -> (
                        let make-toc-item label title indent =
                            let it-num = embed-string (get-cross-reference-number label) in
                            let it-page = embed-string (get-cross-reference-page label) in
                            let ib-indent = inline-skip indent in
                            let ib-title = match tocelem with
                                | TOCElementSectionNoNumber(_, _)
                                    -> read-inline ctx-doc { #title; } ++ inline-skip 3pt
                                | _ -> read-inline ctx-doc {#it-num;. #title;}
                                      ++ inline-skip 3pt
                            in
                            let ib-page = inline-skip 3pt ++ read-inline ctx-doc it-page in
                            let ib-middle =
                                let w = (get-text-width ctx-doc) -' (get-natural-width ib-indent)
                                    -' (get-natural-width ib-title) -' (get-natural-width ib-page) in
                                    if w <' 0pt then inline-fil else
                                        make-dots-line ctx-doc w
                            in
                            bbacc +++ line-break true true ctx-doc
                                (ib-indent ++ (inline-frame-breakable no-pads (Annot.link-to-location-frame label None) (ib-title ++ ib-middle ++ ib-page)))
                        in
                        match tocelem with
                        | TOCElementChapter(label, title) ->
                              make-toc-item label title 0mm
                        | TOCElementSectionNoNumber(label, title) ->
                              make-toc-item label title 0mm
                        | TOCElementSection(label, title) ->
                              make-toc-item label title toc-section-indent
                        | TOCElementSubsection(label, title) ->
                              make-toc-item label title toc-subsection-indent


                    )) block-nil
                in
                (section-heading ctx-doc ib-toc-title) +++ bb-toc-main
        in

        % -- page settings --
        let pagecontf pbinfo =
            let () = FootnoteScheme.start-page () in
            let hgtfb = height-of-float-boxes pbinfo#page-number in
            let (txtorgx, txtorgy) = txtorg in
            (|
                text-origin = (txtorgx, txtorgy +' hgtfb);
                text-height = txthgt -' hgtfb;
            |)
        in
        let pagepartsf pbinfo =
            let pageno = pbinfo#page-number in
            let header =
                let ctx =
                    get-standard-context hdrwid
                        |> set-paragraph-margin 0pt 0pt
                in
                let ib-text =
                    if pageno mod 2 == 0 then
                        (inline-fil ++ read-inline ctx title)
                    else
                        (read-inline ctx title ++ inline-fil)
                in
%        let () = display-message `insert` in
                let (bb-float-boxes, acc) =
                    (!ref-float-boxes) |> List.fold-left (fun (bbacc, acc) elem -> (
                        let (pn, bb) = elem in
                        if pn < pageno then
                            let bbs =
                                line-break true true (ctx |> set-paragraph-margin 0pt 12pt)
                                    (inline-fil ++ embed-block-top ctx txtwid (fun _ -> bb) ++ inline-fil)
                                        % 'ctx' is a dummy context
                            in
                            (bbacc +++ bbs, acc)
                        else
                            (bbacc, elem :: acc)
                    )) (block-nil, [])
                in
                let () = ref-float-boxes <- acc in
                bb-float-boxes
            in
            let footer =
                if show-pages then
                    let ctx = get-standard-context ftrwid in
                    let pgno = if no-title-pageno then
                        (pbinfo#page-number - 1)
                    else
                        pbinfo#page-number
                    in
                    if no-title-pageno && pgno == 0 then
                        block-nil
                    else
                        let it-pageno = embed-string (arabic pgno) in
                        line-break true true ctx
                            (inline-fil ++ (read-inline ctx {— #it-pageno; —}) ++ inline-fil)
                else
                    block-nil
            in
            (|
                header-origin  = hdrorg;
                header-content = header;
                footer-origin  = ftrorg;
                footer-content = footer;
            |)
        in
        let doc = page-break page pagecontf pagepartsf (bb-title +++ bb-toc +++ bb-main) in
        let () = register-outline (List.reverse !outline-ref) in
        doc


    let-mutable num-chapter <- 0
    let-mutable num-section <- 0
    let-mutable num-subsection <- 0
    let-mutable num-theorems <- 0


    let quad-indent ctx =
        inline-skip (get-font-size ctx *' font-ratio-cjk)


    let-block ctx +p inner =
        let ib-inner = read-inline ctx inner in
        let ib-parag = (quad-indent ctx) ++ ib-inner ++ inline-fil in
        form-paragraph ctx ib-parag


    let chapter-scheme ctx label title outline-title-opt inner =
        let ctx-title = make-chapter-title ctx in
        let () = increment num-chapter in
        let () = num-section <- 0 in
        let () = num-subsection <- 0 in
        let s-num = arabic (!num-chapter) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let () = toc-acc-ref <- (TOCElementChapter(label, title)) :: !toc-acc-ref in
        let ib-num =
            read-inline ctx-title (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> (
                    let pageno = pbinfo#page-number in
                    register-cross-reference (label ^ `:page`) (arabic pageno)))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (0, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            let ib =
                inline-frame-breakable no-pads (Annot.register-location-frame label)
                    (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil))
            in
            chapter-heading ctx ib
        in
        let bb-inner = read-block ctx inner in
        bb-title +++ bb-inner


    let section-no-number-scheme ctx label title outline-title-opt inner =
        let ctx-title = make-section-title ctx in
        let () = increment num-section in
        let () = num-subsection <- 0 in
        let s-num = arabic (!num-chapter) ^ `.` ^ arabic (!num-section) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let () = toc-acc-ref <- (TOCElementSectionNoNumber(label, title)) :: !toc-acc-ref in
        let ib-num =
            read-inline ctx-title (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> (
                    let pageno = pbinfo#page-number in
                    register-cross-reference (label ^ `:page`) (arabic pageno)))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (1, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            let ib =
                inline-frame-breakable no-pads (Annot.register-location-frame label)
                    ((inline-fil) ++ ib-title ++ (inline-fil))
            in
            section-no-number-heading ctx ib
        in
        let bb-inner = read-block ctx inner in
        bb-title +++ bb-inner

    let section-scheme ctx label title outline-title-opt inner =
        let ctx-title = make-section-title ctx in
        let () = increment num-section in
        let () = num-subsection <- 0 in
        let s-num = arabic (!num-chapter) ^ `.` ^ arabic (!num-section) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let () = toc-acc-ref <- (TOCElementSection(label, title)) :: !toc-acc-ref in
        let ib-num =
            read-inline ctx-title (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> (
                    let pageno = pbinfo#page-number in
                    register-cross-reference (label ^ `:page`) (arabic pageno)))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (1, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            let ib =
                inline-frame-breakable no-pads (Annot.register-location-frame label)
                    (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil))
            in
            section-heading ctx ib
        in
        let bb-inner = read-block ctx inner in
        bb-title +++ bb-inner


    let subsection-scheme ctx label title outline-title-opt inner =
        let () = num-subsection <- !num-subsection + 1 in
        let s-num = arabic (!num-chapter) ^ `.` ^ arabic (!num-section) ^ `.` ^ arabic (!num-subsection) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let () = toc-acc-ref <- (TOCElementSubsection(label, title)) :: !toc-acc-ref in
        let ctx-title = make-subsection-title ctx in
        let ib-num =
            read-inline ctx-title (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (2, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            line-break true false (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                (inline-frame-breakable no-pads (Annot.register-location-frame label)
                    (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil)))
        in
        let bb-inner = read-block ctx inner in
        bb-title +++ bb-inner


    let-block ctx +chapter ?:labelopt ?:outline-title-opt title inner =
        let label =
            match labelopt with
            | None        -> generate-fresh-label ()
            | Some(label) -> `chap:` ^ label
        in
        (chapter-scheme ctx label title outline-title-opt inner) +++ clear-page


    let-block ctx +section ?:labelopt ?:outline-title-opt title inner =
        let label =
            match labelopt with
            | None        -> generate-fresh-label ()
            | Some(label) -> `sec:` ^ label
        in
        section-scheme ctx label title outline-title-opt inner

    let-block ctx +section-no-number ?:outline-title-opt title inner =
        let label = generate-fresh-label () in
        section-no-number-scheme ctx label title outline-title-opt inner


    let-block ctx +subsection ?:labelopt ?:outline-title-opt title inner =
        let label =
            match labelopt with
            | None        -> generate-fresh-label ()
            | Some(label) -> `sec:` ^ label
        in
        subsection-scheme ctx label title outline-title-opt inner


    let theorem-scheme ctx ctxf category wordopt label inner =
        let () = increment num-theorems in
        let s-num =
            (arabic (!num-chapter)) ^ `.` ^ (arabic (!num-section)) ^ `.` ^ (arabic (!num-theorems))
        in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let it-num = embed-string s-num in
        let ib-dfn =
            read-inline (ctx |> set-latin-font font-latin-bold) {#category; #it-num;}
        in
        let ib-word =
            match wordopt with
            | None       -> inline-nil
            | Some(word) -> read-inline ctx {\ (#word;).}
        in
        let ib-inner = read-inline (ctxf ctx) inner in
        line-break true true ctx
            (ib-dfn ++ ib-word ++ inline-skip (get-font-size ctx) ++ ib-inner ++ inline-fil)


    let make-label prefix labelopt =
        match labelopt with
        | None    -> generate-fresh-label ()
        | Some(s) -> prefix ^ s


    let-block ctx +definition ?:wordopt ?:labelopt inner =
        let label = make-label `definition:` labelopt in
        theorem-scheme ctx (fun x -> x) {Definition} wordopt label inner


    let-block ctx +theorem ?:wordopt ?:labelopt inner =
        let label = make-label `theorem:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Theorem} wordopt label inner


    let-block ctx +lemma ?:wordopt ?:labelopt inner =
        let label = make-label `lemma:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Lemma} wordopt label inner


    let-block ctx +corollary ?:wordopt ?:labelopt inner =
        let label = make-label `corollary:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Corollary} wordopt label inner


    let-block ctx +example ?:wordopt ?:labelopt inner =
        let label = make-label `example:` labelopt in
        theorem-scheme ctx (fun x -> x) {Example} wordopt label inner


    let-block ctx +proof ?:wordopt inner =
        let ib-heading =
            let ctx = ctx |> set-latin-font font-latin-italic in
            match wordopt with
            | None    -> read-inline ctx {Proof.}
            | Some(w) -> read-inline ctx {Proof of #w;.}
        in
        let ib-box = read-inline ctx {▪} in
        line-break true true ctx
            (ib-heading ++ inline-skip (get-font-size ctx) ++ read-inline ctx inner ++ inline-fil ++ ib-box)


    let-inline ctx \emph inner =
        let ctx =
            ctx |> set-font Latin font-latin-sans
                |> set-cjk-font font-cjk-gothic
        in
        read-inline ctx inner


    let-inline \dfn inner = {\emph{#inner;}}


    let-inline ctx \footnote it =
        let size = get-font-size ctx in
        let ibf num =
            let it-num = embed-string (arabic num) in
            let ctx =
                ctx |> set-font-size (size *' 0.75)
                    |> set-manual-rising (size *' 0.25)
            in
            read-inline ctx {\*#it-num;}
        in
        let bbf num =
            let it-num = embed-string (arabic num) in
            let ctx =
                ctx |> set-font-size (size *' 0.9)
                    |> set-leading (size *' 1.2)
                    |> set-paragraph-margin (size *' 0.5) (size *' 0.5)
                    %temporary
            in
            line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
        in
        FootnoteScheme.main ctx ibf bbf
end


% vim: set expandtab :

